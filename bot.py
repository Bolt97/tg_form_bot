import os
import datetime
from html import escape
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
FIO, PHONE, VEHICLE, PHOTO_LIST = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ <b>–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –≤—ã—Å—Ç–∞–≤–∫–µ BALALAYKA PICNIC </b>.\n\n"
        "<b>21.06.2025</b>\n\n"
        "üìã –°–µ–π—á–∞—Å –º—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–µ—Ä—ë–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "<i>–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /cancel</i>",
        parse_mode="HTML"
    )
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ <b>–§–ò–û</b>:", parse_mode="HTML")
    return FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fio"] = update.message.text.strip()
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:", parse_mode="HTML")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text.strip()
    await update.message.reply_text("üöò –í–≤–µ–¥–∏—Ç–µ <b>–º–∞—Ä–∫—É –∏ –≥–æ–¥</b> –∞–≤—Ç–æ/–º–æ—Ç–æ:", parse_mode="HTML")
    return VEHICLE

async def get_vehicle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["vehicle"] = update.message.text.strip()
    context.user_data["photos"] = []
    await update.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–æ 3-—Ö —Ñ–æ—Ç–æ</b> –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ/–º–æ—Ç–æ.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ <code>–≥–æ—Ç–æ–≤–æ</code>.",
        parse_mode="HTML"
    )
    return PHOTO_LIST

async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photos = context.user_data.get("photos", [])
    if len(photos) >= 3:
        await update.message.reply_text("‚ùó –õ–∏–º–∏—Ç ‚Äî 3 —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ <code>–≥–æ—Ç–æ–≤–æ</code>.", parse_mode="HTML")
        return PHOTO_LIST

    file_id = update.message.photo[-1].file_id
    photos.append(file_id)
    context.user_data["photos"] = photos

    await update.message.reply_text(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ {len(photos)} –∏–∑ 3.")
    return PHOTO_LIST

async def confirm_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    if text not in ["–≥–æ—Ç–æ–≤–æ", "–≤—Å—ë", "–≤—Å–µ", "–≥–æ—Ç–æ–≤"]:
        await update.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ <code>–≥–æ—Ç–æ–≤–æ</code>, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å —Ñ–æ—Ç–æ.", parse_mode="HTML")
        return PHOTO_LIST

    photos = context.user_data.get("photos", [])
    if not photos:
        await update.message.reply_text("‚ùó –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.")
        return PHOTO_LIST

    user = update.effective_user
    safe_caption = escape(
        f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫—É:\n\n"
        f"üë§ –§–ò–û: {context.user_data['fio']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üöó –¢–µ—Ö–Ω–∏–∫–∞: {context.user_data['vehicle']}\n"
        f"üïí –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"üÜî @{user.username or user.id}"
    )

    await context.bot.send_photo(
        chat_id=GROUP_CHAT_ID,
        photo=photos[0],
        caption=f"<pre>{safe_caption}</pre>",
        parse_mode="HTML"
    )

    for photo in photos[1:]:
        await context.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=photo)

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            VEHICLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_vehicle)],
            PHOTO_LIST: [
                MessageHandler(filters.PHOTO, get_photo),
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_photos),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()